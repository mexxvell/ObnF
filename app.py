# app.py
"""
–ù–õ–û ‚Äî –§—É—Ç–±–æ–ª—å–Ω–∞—è –õ–∏–≥–∞
–ü–æ–ª–Ω—ã–π backend-–∫–æ–¥ –¥–ª—è Telegram Web App
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import json
import time
import logging
from datetime import datetime, timedelta, timezone
from functools import wraps

import psycopg2
from flask import (
    Flask, render_template, request, jsonify, redirect, url_for, session, g
)
from flask_cors import CORS
from google.oauth2 import service_account
from googleapiclient.discovery import build
from apscheduler.schedulers.background import BackgroundScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('NFO_Liga')

app = Flask(__name__)
CORS(app)
app.secret_key = os.urandom(24)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ Google Sheets)
FIRST_LOGIN_CREDITS = 100
DAILY_CHECKIN_CREDITS = 20
DAILY_STREAK_BONUS = 100
WEEKLY_REWARDS = [300, 200, 100]
REFERRAL_REWARD_REFERRED = 50
REFERRAL_REWARD_REFERRER_AFTER_STAKE = 30
DEFAULT_MARGIN = 0.05  # 5%

# XP —Å–∏—Å—Ç–µ–º—ã
XP_REGISTRATION = 50
XP_DAILY_CHECKIN = 10
XP_CORRECT_PREDICTION = 30
XP_EXACT_SCORE_BONUS = 70
XP_ACHIEVEMENT_BRONZE = 15
XP_ACHIEVEMENT_SILVER = 40
XP_ACHIEVEMENT_GOLD = 120
XP_LIKE = 2
XP_COMMENT = 2
XP_REFERRAL = 20

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_db():
    if 'db' not in g:
        g.db = psycopg2.connect(os.environ['DATABASE_URL'])
    return g.db

@app.teardown_appcontext
def close_db(e=None):
    db = g.pop('db', None)
    if db is not None:
        db.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
def owner_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        user_id = request.args.get('user_id') or request.json.get('user_id')
        if not user_id or str(user_id) != os.environ['OWNER_TELEGRAM_ID']:
            return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403
        return f(*args, **kwargs)
    return decorated_function

# Google Sheets API
def get_sheets_service():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google Sheets API"""
    try:
        logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not os.environ.get('GS_CREDS_JSON'):
            logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GS_CREDS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return None
        
        if not os.environ.get('GS_SHEET_ID'):
            logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GS_SHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return None
        
        # –ü–∞—Ä—Å–∏–º JSON-–∫–ª—é—á–∏
        try:
            creds_info = json.loads(os.environ['GS_CREDS_JSON'])
            logger.info("‚úÖ JSON-–∫–ª—é—á–∏ –¥–ª—è Google API —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω—ã")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GS_CREDS_JSON: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ GS_CREDS_JSON: {str(e)}")
            return None
        
        # –°–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            creds = service_account.Credentials.from_service_account_info(
                creds_info,
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            logger.info("‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google API —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return None
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        try:
            service = build('sheets', 'v4', credentials=creds)
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å Google Sheets API —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ
            spreadsheet_id = os.environ['GS_SHEET_ID']
            try:
                sheet_metadata = service.spreadsheets().get(
                    spreadsheetId=spreadsheet_id
                ).execute()
                
                logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ Google –¢–∞–±–ª–∏—Ü–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (ID: {spreadsheet_id})")
                logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {sheet_metadata.get('properties', {}).get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Å—Ç—ã
                sheets = [sheet['properties']['title'] for sheet in sheet_metadata.get('sheets', [])]
                logger.info(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Å—Ç—ã: {', '.join(sheets) if sheets else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}")
                
                return service
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–µ: {str(e)}")
                logger.error("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                logger.error("   1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π GS_SHEET_ID")
                logger.error("   2. –°–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                logger.error("   3. –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Sheets: {str(e)}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API: {str(e)}")
        return None

def ensure_sheets_structure():
    """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç—ã –≤ Google Sheets, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Google Sheets...")
    
    service = get_sheets_service()
    if not service:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets API")
        return False
    
    spreadsheet_id = os.environ['GS_SHEET_ID']
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ª–∏—Å—Ç–æ–≤
    required_sheets = [
        "–¢–∞–±–ª–∏—Ü–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì–æ–ª—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", 
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì+–ü", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä", "–°–æ—Å—Ç–∞–≤—ã", 
        "–î–µ—Ç–∞–ª–∏ –ú–∞—Ç—á–∞", "–°—Ç–∞–≤–∫–∏", "leaderboard_history", "referrals"
    ]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏—Å—Ç—ã
        sheet_metadata = service.spreadsheets().get(
            spreadsheetId=spreadsheet_id
        ).execute()
        existing_sheets = [sheet['properties']['title'] for sheet in sheet_metadata.get('sheets', [])]
        
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Å—Ç–æ–≤: {len(existing_sheets)}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Å—Ç—ã
        created_sheets = []
        for sheet_name in required_sheets:
            if sheet_name not in existing_sheets:
                logger.info(f"   üÜï –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")
                body = {
                    'requests': [{
                        'addSheet': {
                            'properties': {'title': sheet_name}
                        }
                    }]
                }
                service.spreadsheets().batchUpdate(
                    spreadsheetId=spreadsheet_id,
                    body=body
                ).execute()
                created_sheets.append(sheet_name)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = []
                if sheet_name == "–¢–∞–±–ª–∏—Ü–∞":
                    headers = [["key", "value"]]
                elif sheet_name == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì–æ–ª—ã":
                    headers = [["player_id", "player_name", "team", "matches_played", "goals", "season"]]
                elif sheet_name == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã":
                    headers = [["player_id", "player_name", "team", "matches_played", "assists", "season"]]
                elif sheet_name == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì+–ü":
                    headers = [["player_id", "player_name", "team", "matches_played", "goals_plus_assists", "season"]]
                elif sheet_name == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä":
                    headers = [["match_id", "date_iso", "time_iso", "home_team", "away_team", "status", "score_home", "score_away", "venue", "season", "notes"]]
                elif sheet_name == "–°–æ—Å—Ç–∞–≤—ã":
                    headers = [["match_id", "team", "player_id", "player_name", "position", "is_starting"]]
                elif sheet_name == "–î–µ—Ç–∞–ª–∏ –ú–∞—Ç—á–∞":
                    headers = [["match_id", "event_time", "event_type", "player_id", "player_name", "team", "details"]]
                elif sheet_name == "–°—Ç–∞–≤–∫–∏":
                    headers = [["user_id", "total_bets", "wins", "losses", "win_percent"]]
                elif sheet_name == "leaderboard_history":
                    headers = [["week_start_iso", "user_id", "username", "wins", "total_bets", "win_percent", "rank", "reward_given"]]
                elif sheet_name == "referrals":
                    headers = [["referrer_id", "referred_id", "timestamp", "reward_granted"]]
                    
                if headers:
                    service.spreadsheets().values().update(
                        spreadsheetId=spreadsheet_id,
                        range=f"{sheet_name}!A1",
                        valueInputOption="RAW",
                        body={'values': headers}
                    ).execute()
        
        if created_sheets:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(created_sheets)} –Ω–æ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤: {', '.join(created_sheets)}")
        else:
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∏—Å—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets: {str(e)}")
        logger.error("   –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        logger.error(f"   - Spreadsheet ID: {spreadsheet_id}")
        logger.error(f"   - –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"   - –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        return False

def ensure_sheets_structure():
    """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç—ã –≤ Google Sheets, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    service = get_sheets_service()
    spreadsheet_id = os.environ['GS_SHEET_ID']
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ª–∏—Å—Ç–æ–≤
    required_sheets = [
        "–¢–∞–±–ª–∏—Ü–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì–æ–ª—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", 
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì+–ü", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä", "–°–æ—Å—Ç–∞–≤—ã", 
        "–î–µ—Ç–∞–ª–∏ –ú–∞—Ç—á–∞", "–°—Ç–∞–≤–∫–∏", "leaderboard_history", "referrals"
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏—Å—Ç—ã
    sheet_metadata = service.spreadsheets().get(
        spreadsheetId=spreadsheet_id
    ).execute()
    existing_sheets = [sheet['properties']['title'] for sheet in sheet_metadata.get('sheets', [])]
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Å—Ç—ã
    for sheet_name in required_sheets:
        if sheet_name not in existing_sheets:
            logger.info(f"–°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")
            body = {
                'requests': [{
                    'addSheet': {
                        'properties': {'title': sheet_name}
                    }
                }]
            }
            service.spreadsheets().batchUpdate(
                spreadsheetId=spreadsheet_id,
                body=body
            ).execute()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = []
            if sheet_name == "–¢–∞–±–ª–∏—Ü–∞":
                headers = [["key", "value"]]
            elif sheet_name == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì–æ–ª—ã":
                headers = [["player_id", "player_name", "team", "matches_played", "goals", "season"]]
            elif sheet_name == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã":
                headers = [["player_id", "player_name", "team", "matches_played", "assists", "season"]]
            elif sheet_name == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì+–ü":
                headers = [["player_id", "player_name", "team", "matches_played", "goals_plus_assists", "season"]]
            elif sheet_name == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä":
                headers = [["match_id", "date_iso", "time_iso", "home_team", "away_team", "status", "score_home", "score_away", "venue", "season", "notes"]]
            elif sheet_name == "–°–æ—Å—Ç–∞–≤—ã":
                headers = [["match_id", "team", "player_id", "player_name", "position", "is_starting"]]
            elif sheet_name == "–î–µ—Ç–∞–ª–∏ –ú–∞—Ç—á–∞":
                headers = [["match_id", "event_time", "event_type", "player_id", "player_name", "team", "details"]]
            elif sheet_name == "–°—Ç–∞–≤–∫–∏":
                headers = [["user_id", "total_bets", "wins", "losses", "win_percent"]]
            elif sheet_name == "leaderboard_history":
                headers = [["week_start_iso", "user_id", "username", "wins", "total_bets", "win_percent", "rank", "reward_given"]]
            elif sheet_name == "referrals":
                headers = [["referrer_id", "referred_id", "timestamp", "reward_granted"]]
                
            if headers:
                service.spreadsheets().values().update(
                    spreadsheetId=spreadsheet_id,
                    range=f"{sheet_name}!A1",
                    valueInputOption="RAW",
                    body={'values': headers}
                ).execute()

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
_initialized = False

def init_database():
    """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ –∫–æ–ª–æ–Ω–æ–∫"""
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        db = get_db()
        cursor = db.cursor()
        cursor.execute("ROLLBACK")  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—à–∏–±–∫–∏
        db.commit()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
        required_tables = [
            'users', 'achievements_unlocked', 'matches_cache', 
            'leaderboard_cache', 'transactions', 'leaderboard_history',
            'admin_actions_log'
        ]
        
        existing_tables = []
        for table in required_tables:
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' AND table_name = %s
                )
            """, (table,))
            if cursor.fetchone()[0]:
                existing_tables.append(table)
        
        missing_tables = [table for table in required_tables if table not in existing_tables]
        
        if missing_tables:
            logger.info(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ schema.sql
            try:
                with open('sql/schema.sql', 'r', encoding='utf-8') as f:
                    sql_script = f.read()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
                for statement in sql_script.split(';'):
                    statement = statement.strip()
                    if statement:
                        try:
                            cursor.execute(statement)
                        except Exception as e:
                            logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL: {str(e)}")
                
                db.commit()
                logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–∑ schema.sql")
                
                # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º
                existing_tables = []
                for table in required_tables:
                    cursor.execute("""
                        SELECT EXISTS (
                            SELECT FROM information_schema.tables 
                            WHERE table_schema = 'public' AND table_name = %s
                        )
                    """, (table,))
                    if cursor.fetchone()[0]:
                        existing_tables.append(table)
                
                still_missing = [table for table in required_tables if table not in existing_tables]
                if still_missing:
                    logger.warning(f"‚ö†Ô∏è –í—Å—ë –µ—â—ë –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(still_missing)}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ schema.sql: {str(e)}")
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é
                create_minimal_tables(cursor, db)
        else:
            logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
            check_users_table_structure(cursor, db)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã matches_cache
            check_matches_cache_table(cursor, db)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        try:
            db = get_db()
            cursor = db.cursor()
            create_minimal_tables(cursor, db)
        except Exception as e2:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e2)}")

def create_minimal_tables(cursor, db):
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üîß –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
    
    # –¢–∞–±–ª–∏—Ü–∞ users
    cursor.execute("""
        DROP TABLE IF EXISTS users CASCADE;
        CREATE TABLE users (
            id BIGINT PRIMARY KEY,
            username TEXT,
            display_name TEXT,
            credits INTEGER NOT NULL DEFAULT 0,
            xp INTEGER NOT NULL DEFAULT 0,
            level INTEGER NOT NULL DEFAULT 1,
            daily_checkin_streak INTEGER NOT NULL DEFAULT 0,
            last_checkin_date DATE,
            created_at TIMESTAMP NOT NULL DEFAULT NOW(),
            updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
            banned_until TIMESTAMP,
            referrer_id BIGINT
        )
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ matches_cache
    cursor.execute("""
        DROP TABLE IF EXISTS matches_cache CASCADE;
        CREATE TABLE matches_cache (
            match_id TEXT PRIMARY KEY,
            data_json JSONB NOT NULL,
            updated_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ achievements_unlocked
    cursor.execute("""
        DROP TABLE IF EXISTS achievements_unlocked CASCADE;
        CREATE TABLE achievements_unlocked (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            achievement_key TEXT NOT NULL,
            tier SMALLINT NOT NULL,
            unlocked_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
    """)
    
    db.commit()
    logger.info("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")

def check_users_table_structure(cursor, db):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    cursor.execute("""
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_name = 'users'
    """)
    columns_info = {row[0]: {'type': row[1], 'nullable': row[2]} for row in cursor.fetchall()}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    required_columns = {
        'id': {'type': 'bigint', 'nullable': 'NO', 'default': None},
        'username': {'type': 'text', 'nullable': 'YES', 'default': None},
        'display_name': {'type': 'text', 'nullable': 'YES', 'default': None},
        'credits': {'type': 'integer', 'nullable': 'NO', 'default': '0'},
        'xp': {'type': 'integer', 'nullable': 'NO', 'default': '0'},
        'level': {'type': 'integer', 'nullable': 'NO', 'default': '1'},
        'daily_checkin_streak': {'type': 'integer', 'nullable': 'NO', 'default': '0'},
        'last_checkin_date': {'type': 'date', 'nullable': 'YES', 'default': None},
        'created_at': {'type': 'timestamp without time zone', 'nullable': 'NO', 'default': 'NOW()'},
        'updated_at': {'type': 'timestamp without time zone', 'nullable': 'NO', 'default': 'NOW()'},
        'banned_until': {'type': 'timestamp without time zone', 'nullable': 'YES', 'default': None},
        'referrer_id': {'type': 'bigint', 'nullable': 'YES', 'default': None}
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    for col_name, col_spec in required_columns.items():
        if col_name not in columns_info:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col_name} –≤ —Ç–∞–±–ª–∏—Ü–µ users")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
            null_constraint = "NOT NULL" if col_spec['nullable'] == 'NO' else ""
            default_clause = f"DEFAULT {col_spec['default']}" if col_spec['default'] else ""
            
            cursor.execute(f"ALTER TABLE users ADD COLUMN {col_name} {col_spec['type']} {null_constraint} {default_clause}")
            
            # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ NOT NULL –∏ –Ω–µ –∏–º–µ–µ—Ç DEFAULT, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if col_spec['nullable'] == 'NO' and not col_spec['default']:
                default_val = '0' if 'int' in col_spec['type'] else 'NOW()' if 'timestamp' in col_spec['type'] else "''"
                cursor.execute(f"UPDATE users SET {col_name} = {default_val} WHERE {col_name} IS NULL")
            
            db.commit()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {col_name} –≤ —Ç–∞–±–ª–∏—Ü—É users")
            columns_info[col_name] = {'type': col_spec['type'], 'nullable': col_spec['nullable']}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    for col_name, col_spec in required_columns.items():
        if col_name in columns_info:
            current_info = columns_info[col_name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            current_type = current_info['type']
            required_type = col_spec['type']
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è timestamp
            if 'timestamp' in required_type and 'timestamp' in current_type:
                continue  # –¢–∏–ø—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º NOT NULL
            if col_spec['nullable'] == 'NO' and current_info['nullable'] == 'YES':
                logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ {col_name} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å NOT NULL")
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö NULL
                    if col_spec['default']:
                        cursor.execute(f"UPDATE users SET {col_name} = {col_spec['default']} WHERE {col_name} IS NULL")
                    else:
                        default_val = '0' if 'int' in required_type else 'NOW()' if 'timestamp' in required_type else "''"
                        cursor.execute(f"UPDATE users SET {col_name} = {default_val} WHERE {col_name} IS NULL")
                    
                    # –î–µ–ª–∞–µ–º –∫–æ–ª–æ–Ω–∫—É NOT NULL
                    cursor.execute(f"ALTER TABLE users ALTER COLUMN {col_name} SET NOT NULL")
                    db.commit()
                    logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col_name} —Ç–µ–ø–µ—Ä—å NOT NULL")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É {col_name} NOT NULL: {str(e)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            type_mapping = {
                'integer': 'int',
                'bigint': 'int',
                'text': 'str',
                'date': 'date',
                'timestamp': 'datetime'
            }
            
            current_simple = next((k for k in type_mapping if k in current_type), current_type)
            required_simple = next((k for k in type_mapping if k in required_type), required_type)
            
            if current_simple != required_simple:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ {col_name}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {required_type}, —Ç–µ–∫—É—â–∏–π {current_type}")
                
                try:
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è timestamp
                    if 'timestamp' in required_type and 'timestamp' not in current_type:
                        cursor.execute(f"ALTER TABLE users ALTER COLUMN {col_name} TYPE TIMESTAMP USING {col_name}::timestamp")
                        db.commit()
                        logger.info(f"‚úÖ –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏ {col_name} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ TIMESTAMP")
                        continue
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è integer
                    if 'int' in required_type and 'int' not in current_type:
                        cursor.execute(f"ALTER TABLE users ALTER COLUMN {col_name} TYPE INTEGER USING {col_name}::integer")
                        db.commit()
                        logger.info(f"‚úÖ –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏ {col_name} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ INTEGER")
                        continue
                    
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
                    cursor.execute(f"ALTER TABLE users ALTER COLUMN {col_name} TYPE {required_type}")
                    db.commit()
                    logger.info(f"‚úÖ –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏ {col_name} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {required_type}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ {col_name}: {str(e)}")

def check_matches_cache_table(cursor, db):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã matches_cache"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã matches_cache...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'matches_cache'
        )
    """)
    table_exists = cursor.fetchone()[0]
    
    if not table_exists:
        logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ matches_cache –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        cursor.execute("""
            CREATE TABLE matches_cache (
                match_id TEXT PRIMARY KEY,
                data_json JSONB NOT NULL,
                updated_at TIMESTAMP NOT NULL DEFAULT NOW()
            )
        """)
        db.commit()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ matches_cache —Å–æ–∑–¥–∞–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
    cursor.execute("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'matches_cache'
    """)
    columns = [row[0] for row in cursor.fetchall()]
    
    required_columns = {
        'match_id': 'TEXT PRIMARY KEY',
        'data_json': 'JSONB NOT NULL',
        'updated_at': 'TIMESTAMP NOT NULL DEFAULT NOW()'
    }
    
    for col_name, col_def in required_columns.items():
        if col_name not in columns:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col_name} –≤ —Ç–∞–±–ª–∏—Ü–µ matches_cache")
            
            if 'NOT NULL' in col_def:
                default_val = 'NOW()' if 'TIMESTAMP' in col_def else "'{}'"
                cursor.execute(f"ALTER TABLE matches_cache ADD COLUMN {col_name} {col_def.split('NOT NULL')[0]}")
                cursor.execute(f"UPDATE matches_cache SET {col_name} = {default_val} WHERE {col_name} IS NULL")
                cursor.execute(f"ALTER TABLE matches_cache ALTER COLUMN {col_name} SET NOT NULL")
            else:
                cursor.execute(f"ALTER TABLE matches_cache ADD COLUMN {col_name} {col_def}")
            
            db.commit()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {col_name} –≤ —Ç–∞–±–ª–∏—Ü—É matches_cache")

@app.before_request
def check_initialization():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    global _initialized
    if not _initialized:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        try:
            init_database()  # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            initialize()     # –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
            _initialized = True
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            # –í–∞–∂–Ω–æ: –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º _initialized = True –ø—Ä–∏ –æ—à–∏–±–∫–µ,
            # —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ

def initialize():
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Google Sheets"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Google Sheets API
    service = get_sheets_service()
    if not service:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets API")
        logger.warning("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Google Sheets...")
        if ensure_sheets_structure():
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Google Sheets –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É Google Sheets")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {str(e)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        logger.error("   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        logger.error(f"   - –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"   - –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø
        spreadsheet_id = os.environ.get('GS_SHEET_ID', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        logger.error(f"   - Spreadsheet ID: {spreadsheet_id}")
        logger.error("   - –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("     1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Spreadsheet ID")
        logger.error("     2. –°–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã")
        logger.error("     3. –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞")
        logger.error("     4. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        return False

# API –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
@app.route('/')
def index():
    owner_telegram_id = os.environ.get('OWNER_TELEGRAM_ID', '')
    return render_template('index.html', owner_telegram_id=owner_telegram_id)

@app.route('/api/profile', methods=['GET'])
def get_profile():
    user_id = request.args.get('user_id')
    if not user_id:
        return jsonify({"error": "user_id required"}), 400
    
    logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    db = get_db()
    cursor = db.cursor()
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        check_users_table_structure(cursor, db)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users: {str(e)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        cursor.execute("""
            SELECT id, username, display_name, credits, xp, level, 
                   daily_checkin_streak, last_checkin_date, created_at, updated_at
            FROM users 
            WHERE id = %s
        """, (user_id,))
        user = cursor.fetchone()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ç–∞–±–ª–∏—Ü–µ users: {str(e)}")
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
        try:
            create_minimal_tables(cursor, db)
            user = None
        except Exception as e2:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É users: {str(e2)}")
            return jsonify({"error": "Database error"}), 500
    
    if not user:
        logger.info(f"üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            cursor.execute("""
                INSERT INTO users (id, credits, xp, level, 
                                  daily_checkin_streak, created_at, updated_at)
                VALUES (%s, %s, %s, %s, %s, NOW(), NOW())
                RETURNING id, username, display_name, credits, xp, level, 
                          daily_checkin_streak, last_checkin_date, created_at, updated_at
            """, (user_id, FIRST_LOGIN_CREDITS, XP_REGISTRATION, 1, 0))
            user = cursor.fetchone()
            db.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            try:
                cursor.execute("""
                    INSERT INTO users (id, credits, xp, level, daily_checkin_streak)
                    VALUES (%s, %s, %s, %s, %s)
                    RETURNING id, username, display_name, credits, xp, level, 
                              daily_checkin_streak, last_checkin_date, created_at, updated_at
                """, (user_id, FIRST_LOGIN_CREDITS, XP_REGISTRATION, 1, 0))
                user = cursor.fetchone()
                db.commit()
            except Exception as e2:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e2)}")
                return jsonify({"error": "Database error"}), 500
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∞—á–∏–≤–∫–∏
    achievements = []
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã achievements_unlocked
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' AND table_name = 'achievements_unlocked'
            )
        """)
        if cursor.fetchone()[0]:
            cursor.execute("""
                SELECT achievement_key, tier, unlocked_at 
                FROM achievements_unlocked 
                WHERE user_id = %s
            """, (user_id,))
            achievements = cursor.fetchall()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞—á–∏–≤–æ–∫: {str(e)}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    profile = {
        'id': user[0],
        'username': user[1] or f"user_{user[0]}",
        'display_name': user[2] or f"–ò–≥—Ä–æ–∫ {user[0]}",
        'credits': user[3] if user[3] is not None else FIRST_LOGIN_CREDITS,
        'xp': user[4] if user[4] is not None else XP_REGISTRATION,
        'level': user[5] if user[5] is not None else 1,
        'daily_streak': user[6] if user[6] is not None else 0,
        'next_level_xp': calculate_xp_for_level(user[5] + 1) if user[5] is not None else calculate_xp_for_level(2),
        'achievements': [{
            'key': a[0],
            'tier': a[1],
            'unlocked_at': a[2].isoformat() if a[2] else None
        } for a in achievements]
    }
    
    logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    return jsonify(profile)

@app.route('/api/matches', methods=['GET'])
def get_matches():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—á–∏ –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑ Google Sheets"""
    logger.info("üîç –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π")
    
    db = get_db()
    cursor = db.cursor()
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã matches_cache
        check_matches_cache_table(cursor, db)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã matches_cache: {str(e)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞
    try:
        cursor.execute("""
            SELECT data_json, updated_at 
            FROM matches_cache 
            WHERE match_id = 'schedule'
        """)
        cache = cursor.fetchone()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–µ—à–∞ –º–∞—Ç—á–µ–π: {str(e)}")
        cache = None
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–±–æ—Ç–∞–µ–º —Å timezone-aware –¥–∞—Ç–∞–º–∏
    now = datetime.now(timezone.utc)
    
    # –ï—Å–ª–∏ –∫–µ—à —Å—Ç–∞—Ä—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
    if not cache or (now - cache[1].replace(tzinfo=timezone.utc)).total_seconds() > 900:  # 15 –º–∏–Ω—É—Ç
        logger.info("üîÑ –ö–µ—à –º–∞—Ç—á–µ–π —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")
        update_matches_cache()
        
        try:
            cursor.execute("""
                SELECT data_json, updated_at 
                FROM matches_cache 
                WHERE match_id = 'schedule'
            """)
            cache = cursor.fetchone()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫–µ—à–∞: {str(e)}")
            cache = None
    
    if cache:
        logger.info(f"‚úÖ –ö–µ—à –º–∞—Ç—á–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {cache[1].isoformat()})")
        return jsonify({
            'matches': cache[0],
            'last_updated': cache[1].isoformat()
        })
    else:
        logger.warning("‚ö†Ô∏è –ö–µ—à –º–∞—Ç—á–µ–π –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        return jsonify({
            'matches': [],
            'last_updated': None
        })

def update_matches_cache():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –º–∞—Ç—á–µ–π –∏–∑ Google Sheets"""
    service = get_sheets_service()
    spreadsheet_id = os.environ['GS_SHEET_ID']
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä
    result = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä!A2:K"
    ).execute()
    rows = result.get('values', [])
    
    matches = []
    for row in rows:
        if len(row) >= 11:
            matches.append({
                'match_id': row[0],
                'date': row[1],
                'time': row[2],
                'home_team': row[3],
                'away_team': row[4],
                'status': row[5],
                'score_home': row[6] if len(row) > 6 else None,
                'score_away': row[7] if len(row) > 7 else None,
                'venue': row[8] if len(row) > 8 else None,
                'season': row[9] if len(row) > 9 else None,
                'notes': row[10] if len(row) > 10 else None
            })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    db = get_db()
    cursor = db.cursor()
    cursor.execute("""
        INSERT INTO matches_cache (match_id, data_json, updated_at)
        VALUES ('schedule', %s, NOW())
        ON CONFLICT (match_id) 
        DO UPDATE SET data_json = EXCLUDED.data_json, updated_at = EXCLUDED.updated_at
    """, (json.dumps(matches),))
    db.commit()

@app.route('/api/bet', methods=['POST'])
def place_bet():
    """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    data = request.json
    user_id = data.get('user_id')
    match_id = data.get('match_id')
    bet_type = data.get('bet_type')  # '1x2', 'total', 'exact_score'
    selection = data.get('selection')
    amount = data.get('amount')
    
    if not all([user_id, match_id, bet_type, selection, amount]):
        return jsonify({"error": "Missing required parameters"}), 400
    
    db = get_db()
    cursor = db.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    cursor.execute("SELECT credits FROM users WHERE id = %s", (user_id,))
    user = cursor.fetchone()
    if not user or user[0] < amount:
        return jsonify({"error": "Insufficient credits"}), 400
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    odds = calculate_odds(match_id, bet_type, selection)
    if not odds:
        return jsonify({"error": "Invalid bet selection"}), 400
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏)
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Å—Ç–∞–≤–∫—É
    cursor.execute("""
        INSERT INTO transactions (user_id, amount, type, reason, created_at)
        VALUES (%s, %s, 'bet', %s, NOW())
    """, (user_id, -amount, f"–°—Ç–∞–≤–∫–∞ –Ω–∞ –º–∞—Ç—á {match_id}"))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–≤–æ–∫ –≤ Google Sheets
    update_betting_stats(user_id, amount)
    
    db.commit()
    
    # –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ —Å—Ç–∞–≤–∫—É
    add_xp(user_id, XP_CORRECT_PREDICTION, "–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞")
    
    return jsonify({
        "success": True,
        "odds": odds,
        "amount": amount,
        "potential_winnings": round(amount * odds, 2)
    })

def calculate_odds(match_id, bet_type, selection):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∂–∏"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ Google Sheets –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∂—É –∏–∑ Google Sheets –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    margin = DEFAULT_MARGIN
    
    if bet_type == '1x2':
        # –ü—Ä–∏–º–µ—Ä: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–π –ø–æ–±–µ–¥—ã, –Ω–∏—á—å–∏, –≤—ã–µ–∑–¥–Ω–æ–π –ø–æ–±–µ–¥—ã
        if selection == '1':
            prob = 0.4
        elif selection == 'X':
            prob = 0.3
        elif selection == '2':
            prob = 0.3
        else:
            return None
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ä–∂—É
        # –§–æ—Ä–º—É–ª–∞: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = 1 / (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å / (1 - –º–∞—Ä–∂–∞))
        adjusted_prob = prob / (1 - margin)
        odds = 1 / adjusted_prob
        return round(odds, 2)
    
    elif bet_type == 'total':
        # –ü—Ä–∏–º–µ—Ä –¥–ª—è —Ç–æ—Ç–∞–ª–∞ >2.5
        prob = 0.6
        adjusted_prob = prob / (1 - margin)
        odds = 1 / adjusted_prob
        return round(odds, 2)
    
    elif bet_type == 'exact_score':
        # –í—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—á–µ—Ç–∞
        return 5.50
    
    return None

def update_betting_stats(user_id, amount):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–≤–æ–∫ –≤ Google Sheets"""
    service = get_sheets_service()
    spreadsheet_id = os.environ['GS_SHEET_ID']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    result = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range="–°—Ç–∞–≤–∫–∏!A2:A"
    ).execute()
    user_ids = [row[0] for row in result.get('values', []) if row]
    
    if str(user_id) in user_ids:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        idx = user_ids.index(str(user_id)) + 2  # +2 because A2 is first row
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        result = service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range=f"–°—Ç–∞–≤–∫–∏!B{idx}:E{idx}"
        ).execute()
        values = result.get('values', [])
        
        if values:
            total_bets = int(values[0][0]) + 1 if len(values[0]) > 0 else 1
            wins = int(values[0][1]) if len(values[0]) > 1 else 0
            losses = int(values[0][2]) if len(values[0]) > 2 else 0
            win_percent = round(wins / total_bets * 100, 2) if total_bets > 0 else 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            service.spreadsheets().values().update(
                spreadsheetId=spreadsheet_id,
                range=f"–°—Ç–∞–≤–∫–∏!B{idx}:E{idx}",
                valueInputOption="RAW",
                body={'values': [[total_bets, wins, losses, win_percent]]}
            ).execute()
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        service.spreadsheets().values().append(
            spreadsheetId=spreadsheet_id,
            range="–°—Ç–∞–≤–∫–∏!A1",
            valueInputOption="RAW",
            body={'values': [[user_id, 1, 0, 0, 0]]}
        ).execute()

def calculate_xp_for_level(level):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç XP, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å"""
    # –§–æ—Ä–º—É–ª–∞: XP_needed(level) = 100 + floor(1.15^(level-1) * 50)
    return int(100 + (1.15 ** (level - 1)) * 50)

def add_xp(user_id, xp_amount, reason):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
    db = get_db()
    cursor = db.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT xp, level 
        FROM users 
        WHERE id = %s
    """, (user_id,))
    user = cursor.fetchone()
    
    if not user:
        return
    
    current_xp = user[0]
    current_level = user[1]
    new_xp = current_xp + xp_amount
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    next_level_xp = calculate_xp_for_level(current_level + 1)
    new_level = current_level
    
    while new_xp >= next_level_xp:
        new_level += 1
        new_xp -= next_level_xp
        next_level_xp = calculate_xp_for_level(new_level + 1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    cursor.execute("""
        UPDATE users 
        SET xp = %s, level = %s, updated_at = NOW()
        WHERE id = %s
    """, (new_xp, new_level, user_id))
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    cursor.execute("""
        INSERT INTO transactions (user_id, amount, type, reason, created_at)
        VALUES (%s, %s, 'xp', %s, NOW())
    """, (user_id, xp_amount, reason))
    
    db.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏
    if new_level > current_level:
        check_achievement(user_id, 'level_up', new_level)
    
    return new_level > current_level  # True, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω

def check_achievement(user_id, achievement_key, value=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞—á–∏–≤–∫–∏"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞—á–∏–≤–∫–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞
    with open('achievements.json', 'r', encoding='utf-8') as f:
        achievements = json.load(f)
    
    if achievement_key not in achievements:
        return
    
    achievement = achievements[achievement_key]
    db = get_db()
    cursor = db.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç—Ç–æ–π –∞—á–∏–≤–∫–µ
    cursor.execute("""
        SELECT tier 
        FROM achievements_unlocked 
        WHERE user_id = %s AND achievement_key = %s
    """, (user_id, achievement_key))
    current_tier = cursor.fetchone()
    
    current_tier = current_tier[0] if current_tier else 0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
    new_tier = 0
    if value is None:
        # –î–ª—è –∞—á–∏–≤–æ–∫ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
        new_tier = 1
    else:
        if value >= achievement['gold_threshold']:
            new_tier = 3
        elif value >= achievement['silver_threshold']:
            new_tier = 2
        elif value >= achievement['bronze_threshold']:
            new_tier = 1
    
    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
    if new_tier > current_tier:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∞—á–∏–≤–∫—É
        cursor.execute("""
            INSERT INTO achievements_unlocked (user_id, achievement_key, tier, unlocked_at)
            VALUES (%s, %s, %s, NOW())
            ON CONFLICT (user_id, achievement_key) 
            DO UPDATE SET tier = EXCLUDED.tier, unlocked_at = EXCLUDED.unlocked_at
        """, (user_id, achievement_key, new_tier))
        
        # –ù–∞—á–∏—Å–ª—è–µ–º XP –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∞—á–∏–≤–∫–∏
        xp_reward = 0
        if new_tier == 1:
            xp_reward = XP_ACHIEVEMENT_BRONZE
        elif new_tier == 2:
            xp_reward = XP_ACHIEVEMENT_SILVER
        elif new_tier == 3:
            xp_reward = XP_ACHIEVEMENT_GOLD
        
        if xp_reward > 0:
            add_xp(user_id, xp_reward, f"–ê—á–∏–≤–∫–∞: {achievement['title']}")
        
        db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—á–∏–≤–æ–∫ –¥–ª—è –∞—á–∏–≤–∫–∏ "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä"
        if achievement_key != 'achievement_collector':
            cursor.execute("""
                SELECT COUNT(*) 
                FROM achievements_unlocked 
                WHERE user_id = %s
            """, (user_id,))
            total_achievements = cursor.fetchone()[0]
            check_achievement(user_id, 'achievement_collector', total_achievements)

@app.route('/api/daily-checkin', methods=['POST'])
def daily_checkin():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = request.json.get('user_id')
    if not user_id:
        return jsonify({"error": "user_id required"}), 400
    
    db = get_db()
    cursor = db.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT daily_checkin_streak, last_checkin_date 
        FROM users 
        WHERE id = %s
    """, (user_id,))
    user = cursor.fetchone()
    
    if not user:
        return jsonify({"error": "User not found"}), 404
    
    current_streak, last_checkin = user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –¥–µ–Ω—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞
    today = datetime.now(timezone.utc).date()
    if last_checkin and last_checkin >= today:
        return jsonify({"error": "Already checked in today"}), 400
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫
    new_streak = 1
    if last_checkin and (today - last_checkin).days == 1:
        new_streak = current_streak + 1
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
    credits_reward = DAILY_CHECKIN_CREDITS
    if new_streak == 7:
        credits_reward += DAILY_STREAK_BONUS
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        UPDATE users 
        SET daily_checkin_streak = %s, 
            last_checkin_date = %s,
            credits = credits + %s,
            updated_at = NOW()
        WHERE id = %s
    """, (new_streak, today, credits_reward, user_id))
    
    # –ù–∞—á–∏—Å–ª—è–µ–º XP
    add_xp(user_id, XP_DAILY_CHECKIN, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É –¥–ª—è —á–µ–∫-–∏–Ω–æ–≤
    check_achievement(user_id, 'daily_streaks', new_streak)
    
    db.commit()
    
    return jsonify({
        "success": True,
        "streak": new_streak,
        "credits_reward": credits_reward,
        "xp_reward": XP_DAILY_CHECKIN
    })

@app.route('/api/admin/update-sheets', methods=['POST'])
@owner_required
def admin_update_sheets():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –∏–∑ Google Sheets (–∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–µ)"""
    update_matches_cache()
    return jsonify({"success": True, "message": "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ Google Sheets"})

@app.route('/api/admin/pay-rewards', methods=['POST'])
@owner_required
def admin_pay_rewards():
    """–í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–µ)"""
    pay_weekly_rewards()
    return jsonify({"success": True, "message": "–ù–∞–≥—Ä–∞–¥—ã –≤—ã–ø–ª–∞—á–µ–Ω—ã"})

def pay_weekly_rewards():
    """–í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é"""
    service = get_sheets_service()
    spreadsheet_id = os.environ['GS_SHEET_ID']
    db = get_db()
    cursor = db.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∏–∑ Google Sheets
    result = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range="–°—Ç–∞–≤–∫–∏!A2:E"
    ).execute()
    
    rows = result.get('values', [])
    leaderboard = []
    
    for row in rows:
        if len(row) >= 5:
            try:
                user_id = row[0]
                total_bets = int(row[1])
                wins = int(row[2])
                win_percent = float(row[4]) if row[4] else 0
                
                if total_bets >= 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å—Ç–∞–≤–æ–∫ –¥–ª—è —É—á–∞—Å—Ç–∏—è
                    leaderboard.append({
                        'user_id': user_id,
                        'wins': wins,
                        'total_bets': total_bets,
                        'win_percent': win_percent
                    })
            except (ValueError, IndexError):
                continue
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º: win_percent (desc), total_bets (desc)
    leaderboard.sort(key=lambda x: (-x['win_percent'], -x['total_bets']))
    
    # –ë–µ—Ä–µ–º —Ç–æ–ø-3
    top_users = leaderboard[:3]
    
    # –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    for i, user in enumerate(top_users):
        reward = WEEKLY_REWARDS[i]
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        cursor.execute("""
            UPDATE users 
            SET credits = credits + %s 
            WHERE id = %s
        """, (reward, user['user_id']))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        cursor.execute("""
            INSERT INTO leaderboard_history 
            (week_start_iso, user_id, username, wins, total_bets, win_percent, rank, reward_given)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            datetime.now(timezone.utc).strftime("%Y-%m-%d"),
            user['user_id'],
            f"user_{user['user_id']}",
            user['wins'],
            user['total_bets'],
            user['win_percent'],
            i + 1,
            True
        ))
        
        # –ù–∞—á–∏—Å–ª—è–µ–º XP
        add_xp(user['user_id'], 50, f"–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –Ω–µ–¥–µ–ª–∏: –º–µ—Å—Ç–æ {i+1}")
    
    db.commit()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–≤–æ–∫ –≤ Google Sheets
    service.spreadsheets().values().clear(
        spreadsheetId=spreadsheet_id,
        range="–°—Ç–∞–≤–∫–∏!B2:E"
    ).execute()

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
def scheduled_weekly_reset():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
    pay_weekly_rewards()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.add_job(
    func=scheduled_weekly_reset,
    trigger='cron',
    day_of_week='mon',
    hour=4,
    timezone='Europe/Zagreb'
)
scheduler.start()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(500)
def server_error(e):
    logger.exception("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True)